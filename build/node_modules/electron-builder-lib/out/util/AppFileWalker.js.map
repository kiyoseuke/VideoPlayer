{"version":3,"sources":["../../src/util/AppFileWalker.ts"],"names":[],"mappings":";;;;;;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;;;AAEA,MAAM,mCAAmC,GAAG,KAAK,GAAG,cAApD;;AAEA,SAAA,mBAAA,CAA6B,OAA7B,EAAiD;AAC/C,MAAI,CAAC,QAAQ,uBAAT,KAAqC,QAAQ,OAAR,MAAqB,QAAQ,kBAAR,EAA1D,CAAJ,EAA6F;AAC3F,YAAQ,cAAR,CAAuB,MAAvB;AACD;;AACD,SAAO,OAAP;AACD;AAED;;;AACM,MAAA,aAAA,SAA6B,4CAA7B,CAAiD;AACrD,cAAY,OAAZ,EAAkC,QAAlC,EAAoD;AAClD,UAAM,oBAAoB,OAApB,CAAN,EAAoC,QAApC;AACD,GAHoD,CAKrD;;;AACA,UAAQ,IAAR,EAAsB,QAAtB,EAAuC,MAAvC,EAAuD,YAAvD,EAAkF;AAChF,QAAI,SAAS,WAAT,EAAJ,EAA4B;AAC1B;AACA;AACA;AACA,UAAI,KAAK,QAAL,CAAc,gCAAd,CAAJ,EAAqD;AACnD,eAAO,KAAP;AACD;AACF,KAPD,MAQK;AACH;AACA,WAAK,QAAL,CAAc,GAAd,CAAkB,IAAlB,EAAwB,QAAxB;AACD;;AAED,WAAO,KAAK,UAAL,CAAgB,IAAhB,EAAsB,QAAtB,CAAP;AACD;;AArBoD","sourcesContent":["import { FileConsumer } from \"builder-util/out/fs\"\nimport { Stats } from \"fs-extra-p\"\nimport { FileMatcher } from \"../fileMatcher\"\nimport { Packager } from \"../packager\"\nimport { NodeModuleCopyHelper } from \"./NodeModuleCopyHelper\"\nimport * as path from \"path\"\n\nconst nodeModulesSystemDependentSuffix = `${path.sep}node_modules`\n\nfunction addAllPatternIfNeed(matcher: FileMatcher) {\n  if (!matcher.isSpecifiedAsEmptyArray && (matcher.isEmpty() || matcher.containsOnlyIgnore())) {\n    matcher.prependPattern(\"**/*\")\n  }\n  return matcher\n}\n\n/** @internal */\nexport class AppFileWalker extends NodeModuleCopyHelper implements FileConsumer {\n  constructor(matcher: FileMatcher, packager: Packager) {\n    super(addAllPatternIfNeed(matcher), packager)\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  consume(file: string, fileStat: Stats, parent: string, siblingNames: Array<string>): any {\n    if (fileStat.isDirectory()) {\n      // https://github.com/electron-userland/electron-builder/issues/1539\n      // but do not filter if we inside node_modules dir\n      // update: solution disabled, node module resolver should support such setup\n      if (file.endsWith(nodeModulesSystemDependentSuffix)) {\n        return false\n      }\n    }\n    else {\n      // save memory - no need to store stat for directory\n      this.metadata.set(file, fileStat)\n    }\n\n    return this.handleFile(file, fileStat)\n  }\n}"],"sourceRoot":""}
